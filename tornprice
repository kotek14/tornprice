#!/usr/bin/python3
import requests
import argparse
import os.path
from ast import literal_eval

api_key = "INSERT YOUR KEY HERE"
#api_key = os.environ['TORN']

FLOWER_SET = ['African Violet', 'Banana Orchid', 'Cherry Blossom', 'Ceibo Flower', 'Crocus', 'Dahlia', 'Edelweiss', 'Heather', 'Orchid', 'Peony', 'Tribulus Omanense']
PLUSHIE_SET = ['Camel Plushie', 'Chamois Plushie', 'Jaguar Plushie', 'Kitten Plushie', 'Lion Plushie', 'Monkey Plushie', 'Nessie Plushie', 'Panda Plushie', 'Red Fox Plushie', 'Sheep Plushie', 'Stingray Plushie', 'Teddy Bear Plushie', 'Wolverine Plushie']

def throw_an_error(code):
	if code == 1:
		print("Error 1: Are you online?")
	elif code == 20:
		print("Error 20: Item ID has to be an integer")
	elif code == 21:
		print("Error 21: Item name has to be a string")
	elif code == 100:
		print("Error 100: Item doesn't exist or there are no offers on the item market")
	exit(code)

def number_output(number):
	return('{:,}'.format(number))

def market_api_call(item):
	try:
		p = requests.get("https://api.torn.com/market/" + str(item) + "?selections=bazaar,itemmarket&key=" + api_key)
		prices = p.json()
		if prices['bazaar'] is None and prices['itemmarket'] is None:
			throw_an_error(100)
		elif prices['bazaar'] is None:
			del prices['bazaar']
		elif prices['itemmarket'] is None:
			del prices['itemmarket']
		return(prices)
	except requests.exceptions.ConnectionError:
		throw_an_error(1)

def points_comparison(data):
	print("Please remember that this function makes 25 requests to Torn API. You only have 100 per minute. Use it wisely!")
	print("Magic happens... Be patient...")
	fset_price = 0
	pset_price = 0
	points_prices = []
	pointsmarket = requests.get("https://api.torn.com/market/?selections=pointsmarket&key=" + api_key)
	points = pointsmarket.json()
	for lot in points['pointsmarket']:
		points_prices.append(points['pointsmarket'][lot]['cost'])
	points_prices.sort()
	for flower in FLOWER_SET:
		cost = getprices(find_id(data, flower))
		fset_price += cost[0]
	for plushie in PLUSHIE_SET:
		cost = getprices(find_id(data, plushie))
		pset_price += cost[0]
	print("The current price of 10 points: " + str(number_output(points_prices[0] * 10)))
	print("The current price of a flower set: " + str(number_output(fset_price)))
	print("The current price of a plushie set: " + str(number_output(pset_price)))
	

def item_sets(setname):
	inventory = requests.get("https://api.torn.com/user/?selections=inventory&key=" + api_key)
	items = inventory.json()
	flower_set = FLOWER_SET
	plushie_set = PLUSHIE_SET
	print("Here is what you're missing from a " + setname + " set:")
	if setname == "flower":
		for flower in items['inventory']:
			if flower['name'] in flower_set:
				flower_set.remove(flower['name'])
		for flower in flower_set:
			print(flower + " is missing!")
	elif setname == "plushie":
		for plushie in items['inventory']:
			if plushie['name'] in plushie_set:
				plushie_set.remove(plushie['name'])
		for plushie in plushie_set:
			print(plushie + " is missing!")
	else:
		print("This wasn't supposed to happen. Sorry...")

def my_items(setname):
	total = 0
	print("Checking your inventory...")
	inventory = requests.get("https://api.torn.com/user/?selections=inventory&key=" + api_key)
	items = inventory.json()
	for item in items['inventory']:
		if item['type'] == setname:
			cost = getprices(item['ID'])
			cost.sort()
			print("You have %s of %s. Each costs %s, %s in total" % (number_output(item['quantity']), item['name'], number_output(cost[0]), number_output(cost[0] * item['quantity'])))
			total += cost[0] * item['quantity']
	print("--------------------")
	print("Total: " + str(number_output(total)))

def sort_and_present(prices):
	prices.sort()
	i = 0
	while i < len(prices) and i <= 20:
		print(number_output(prices[i]))
		i += 1
	exit(0)

def itemupdate():
	r = requests.get("https://api.torn.com/torn/?selections=items&key=" + api_key)
	cache = open("tornitems.kot", "w+")
	cache.write(str(r.json()))
	cache.close()
	
def itemload():
	if os.path.exists("tornitems.kot"):
		cache = open("tornitems.kot", "r")
		data = literal_eval(cache.read())
		cache.close()
		return(data)
	else:
		itemupdate()
		print("Item list updated.")
		return(itemload())

def getprices(item_id):
	prices = market_api_call(item_id)
	all_prices = []
	for source in prices:
		for seller in prices[source]:
			all_prices.append(prices[source][seller]['cost'])
	return(all_prices)

def find_id(data, name):
	for itemid in data["items"]:
		if data["items"][str(itemid)]["name"] == name:
			return(itemid)

parser = argparse.ArgumentParser(description="TornPrice v1.8 by Kotek14")
parser.add_argument("--update", action="store_true", help="Force update the item list")
parser.add_argument("--id", help="ID of the item")
parser.add_argument("--name", help="Name of the item")
parser.add_argument("--plushies", action="store_true", help="Calculate the total price of your plushies")
parser.add_argument("--flowers", action="store_true", help="Calculate the total price of your flowers")
parser.add_argument("--plushie-set", action="store_true", help="Check what is missing from your plushie set")
parser.add_argument("--flower-set", action="store_true", help="Check what is missing from your flower set")
parser.add_argument("--points", action="store_true", help="Check if it makes sense to exchange sets to points")

args = parser.parse_args()

if args.update:
	itemupdate()
if args.plushies:
	my_items("Plushie")
elif args.flowers:
	my_items("Flower")
elif args.flower_set:
	item_sets("flower")
elif args.plushie_set:
	item_sets("plushie")
elif args.points:
	points_comparison(itemload())
elif args.id:
	try:
		int(args.id)
	except:
		throw_an_error(20)
	prices = getprices(args.id)
	sort_and_present(prices)
elif args.name:
	try:
		int(args.name)
	except:
		data = itemload()
		prices_list = getprices(find_id(data, args.name))
		sort_and_present(prices_list)
	throw_an_error(21)
else:
	data = itemload()
	itemname = input("Name of the item? ")
	prices_list = getprices(find_id(data, itemname))
	sort_and_present(prices_list)
